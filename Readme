1. Install and run RabbitMQ
   http://localhost:15672/
2. Change IP in \spring cloud\config-server-nfs\application.properties as per current ip
3. Run Spring config server: mvn spring-boot:run
4. Run Service discovery: mvn spring-boot:run
5. Run API gateway: mvn spring-boot:run
6. Run Albums service: mvn spring-boot:run
7. Run Users service: mvn spring-boot:run
8. Run Zipkin server (via docker): https://zipkin.io/pages/quickstart.html
   http://localhost:9411/zipkin/
9. Run Elastic search: bin/elasticsearch
	Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):
	bU+FHLwBkB2thfmy=aEm
	HTTP CA certificate SHA-256 fingerprint:
	c6bc7c4399d9f4787b7f930fd4379e715e4820e5b2b52c94986bf8dbc32797cd
	Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):
	eyJ2ZXIiOiI4LjguMSIsImFkciI6WyIxNzIuMjIuMzIuMTo5MjAwIl0sImZnciI6ImM2YmM3YzQzOTlkOWY0Nzg3YjdmOTMwZmQ0Mzc5ZTcxNWU0ODIwZTViMmI1MmM5NDk4NmJmOGRiYzMyNzk3Y2QiLCJrZXkiOiIzT1prOTRnQjNNckFwcVVDc29OTjpTYXpKckJBNlM1aVBZTS1EZ081d0xBIn0=
10. Run logstash: bin/logstash -f spring-cloud.conf
	https://localhost:9200/_cat/indices/
11. Run Kibana: bin/kibana
	http://localhost:5601/

12. Deploy on AWS EC2

	Install Docker on AWS EC2
		sudo yum install docker 
		sudo service docker start
		sudo usermod -a -G docker ec2-user

	Run RabbitMQ Docker Container
		docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 rabbitmq:3-management

	To run RabbitMQ and change Default user name and password:
		docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 -e RABBITMQ_DEFAULT_USER=user –e RABBITMQ_DEFAULT_PASS=password rabbitmq:3-management

	Run Config Server Docker Container
		docker run -d -p 8012:8012 -e "spring.rabbitmq.host=172.17.0.2" kargopolov/config-server

	Run Eureka Docker Container
		docker run -d -p 8010:8010 -e "spring.cloud.config.uri=http://172.31.0.133:8012" kargopolov/sk-eureka-server

	Run Zuul API Gateway Docker Container
		docker run -d -e "spring.cloud.config.uri=http://99.79.172.54:8012" -e "spring.rabbitmq.host=99.79.172.54" -p 8011:8011 kargopolov/sk-zuul-api-gateway

	Run Elasticsearch Docker Container
		docker run -d --name elasticsearch --network api_network -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.3.0

	Run Kibana Docker Container
		docker run -d --network api-network -p 5601:5601 kibana:7.3.0

	Run Albums Microservice Docker Container
		docker run -it -d -e "eureka.client.serviceUrl.defaultZone=http://test:test@99.79.99.76:8010/eureka" --network host -e "logging.file=/api-logs/albums-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/albums-microservice

	Run Logstash for Albums Microservice Docker Container
		docker run -d --name logstash /home/ec2-user/api-logs:/api-logs kargopolov/sk-albums-microservice-logstash

	Run MySQL Docker Container
		docker run –d -p 3306:3306 --name mysql-docker-container -e MYSQL_ROOT_PASSWORD=sergey -e MYSQL_DATABASE=photo_app -e MYSQL_USER=sergey -e MYSQL_PASSWORD=sergey mysql:latest

	Run Users Microservice Docker Container
		docker run -d -e "spring.cloud.config.uri=http://172.31.4.43:8012" -e "spring.rabbitmq.host=172.31.4.43" -e "eureka.client.serviceUrl.defaultZone=http://test:test@172.31.18.99:8010/eureka" -e "spring.datasource.url=jdbc:mysql://172.31.13.167:3306/photo_app?serverTimezone=UTC" --network host -e "logging.file=/api-logs/users-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/sk-users-microservice

	Run Logstash for Users Microservice
		docker run -d --name users-ws-logstash /home/ec2-user/home:/api-logs kargopolov/sk-users-ws-logstash
	
	
13. References
https://github.com/simplyi/mobile-app-ws-quick-start.git

Spring Cloud Course Repositorties
https://github.com/simplyi/SpringCloudVideoCourse
https://github.com/simplyi/SpringCloudVideoCourse/tree/update-spring-boot-v3.0.1

Spring Cloud API Gateway
https://github.com/simplyi/SpringCloudAPIGateway
https://github.com/simplyi/SpringCloudAPIGateway/tree/update-spring-boot-v3.0.1

Implementing User Login 
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-13-user-login-spring-boot-3

Microservices Communication 
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-24-microservices-communication-spring-boot-3

Actuator
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-21-actuator-spring-boot-3

Resilience4J 
https://github.com/simplyi/SpringCloudVideoCourse/tree/resilience4j-SpringBoot-3

Distributed Tracing with Micrometer and Zipkin
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-28-spring-boot3-zipkin

Secure Eureka Dashboard 
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-30-secure-eureka-spring-boot-3

Method Level Security
https://github.com/simplyi/SpringCloudVideoCourse/tree/section-33-method-level-security-spring-boot-3

Microservices
https://docs.google.com/presentation/d/1pDRdibbx5nin-2LeYwpeSqVEfX5BB_S5UYlJv_s4MVc/edit#slide=id.p

Eureka Discovery Service
https://docs.google.com/presentation/d/1Wl-xycik-bxqVAjY7OpdI3o9TscOAdINhEwuDziKM1A/edit#slide=id.p

Spring Could API gateway
https://docs.google.com/presentation/d/1yl0br1woTA07JPMi1M7U1mFiGy5mb_qf-Z17r4IsdPk/edit#slide=id.gb1d1eaf0e9_1_6

Documentation
https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories
https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories
https://cloud.spring.io/spring-cloud-gateway/reference/html/#global-filters
https://cloud.spring.io/spring-cloud-gateway/reference/html/#httpheadersfilters
https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
https://cloud.spring.io/spring-cloud-gateway/multi/multi__actuator_api.html
https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html
https://www.appsdeveloperblog.com/docker-commands-cheat-sheet/